{
    "boost.color.any": "qualquer cor",
    "boost.color.black": "preto",
    "boost.color.blue": "azul",
    "boost.color.green": "verde",
    "boost.color.red": "vermelho",
    "boost.color.white": "branco",
    "boost.color.yellow": "amarelo",
    "boost.getMotorPosition": "posição do motor [MOTOR_REPORTER_ID]",
    "boost.getTiltAngle": "ângulo de inclinação [TILT_DIRECTION]",
    "boost.motorDirection.backward": "por aí",
    "boost.motorDirection.forward": "por aqui",
    "boost.motorDirection.reverse": "inverter",
    "boost.motorOff": "desligue o motor [MOTOR_ID]",
    "boost.motorOn": "ligue o motor [MOTOR_ID]",
    "boost.motorOnFor": "ligue o motor [MOTOR_ID] por [DURATION] segundos",
    "boost.motorOnForRotation": "ligue o motor [MOTOR_ID] por [ROTATION] rotações",
    "boost.seeingColor": "vendo tijolo [COLOR]?",
    "boost.setLightHue": "defina a cor como [HUE]",
    "boost.setMotorDirection": "mude a direção do motor [MOTOR_ID] para [MOTOR_DIRECTION]",
    "boost.setMotorPower": "mude a velocidade do motor [MOTOR_ID] para [POWER] %",
    "boost.tiltDirection.any": "qualquer",
    "boost.tiltDirection.down": "baixo",
    "boost.tiltDirection.left": "esquerda",
    "boost.tiltDirection.right": "direita",
    "boost.tiltDirection.up": "para cima",
    "boost.whenColor": "quando um tijolo [COLOR] for visto",
    "boost.whenTilted": "quando inclinado para [TILT_DIRECTION_ANY]",
    "ev3.beepNote": "som de bip [NOTE] por [TIME] segundos",
    "ev3.buttonPressed": "botão [PORT] pressionado?",
    "ev3.getBrightness": "brilho",
    "ev3.getDistance": "distância",
    "ev3.getMotorPosition": "posição do motor [PORT]",
    "ev3.motorSetPower": "defina potência do motor [PORT] em [POWER] %",
    "ev3.motorTurnClockwise": "gire o motor [PORT] nesse sentido por [TIME] segundos",
    "ev3.motorTurnCounterClockwise": "gire o motor [PORT] naquele sentido por [TIME] segundos",
    "ev3.whenBrightnessLessThan": "quando brilho < [DISTANCE]",
    "ev3.whenButtonPressed": "quando botão [PORT] estiver pressionado",
    "ev3.whenDistanceLessThan": "quando distância < [DISTANCE]",
    "gdxfor.getAcceleration": "aceleração [DIRECTION]",
    "gdxfor.getForce": "força",
    "gdxfor.getSpin": "velocidade de rotação [DIRECTION]",
    "gdxfor.getTilt": "inclinar ângulo [TILT]",
    "gdxfor.isFreeFalling": "caindo?",
    "gdxfor.isTilted": "intitulado [TILT]",
    "gdxfor.pulled": "puxado",
    "gdxfor.pushed": "empurrado",
    "gdxfor.shaken": "agitado",
    "gdxfor.startedFalling": "começar a cair",
    "gdxfor.tiltDirectionMenu.any": "qualquer",
    "gdxfor.tiltDirectionMenu.back": "de trás",
    "gdxfor.tiltDirectionMenu.front": "da frente",
    "gdxfor.tiltDirectionMenu.left": "esquerda",
    "gdxfor.tiltDirectionMenu.right": "direita",
    "gdxfor.turnedFaceDown": "virado para baixo",
    "gdxfor.turnedFaceUp": "virado para cima",
    "gdxfor.whenForcePushedOrPulled": "quando o sensor de força estiver sendo [PUSH_PULL]",
    "gdxfor.whenGesture": "quando [GESTURE]",
    "gdxfor.whenTilted": "quando intitulado [TILT]",
    "makeymakey.downArrow": "seta para baixo",
    "makeymakey.downArrowShort": "baixo",
    "makeymakey.leftArrow": "seta para esquerda",
    "makeymakey.leftArrowShort": "esquerda",
    "makeymakey.rightArrow": "seta para direita",
    "makeymakey.rightArrowShort": "direita",
    "makeymakey.spaceKey": "espaço",
    "makeymakey.upArrow": "seta para cima",
    "makeymakey.upArrowShort": "para cima",
    "makeymakey.whenKeyPressed": "quando a tecla [KEY] for pressionada",
    "makeymakey.whenKeysPressedInOrder": "quando [SEQUENCE] forem pressionados em ordem",
    "microbit.buttonsMenu.any": "qualquer",
    "microbit.clearDisplay": "limpe a tela",
    "microbit.defaultTextToDisplay": "Olá!",
    "microbit.displaySymbol": "exiba [MATRIX]",
    "microbit.displayText": "exiba o texto [TEXT]",
    "microbit.gesturesMenu.jumped": "pulou",
    "microbit.gesturesMenu.moved": "moveu",
    "microbit.gesturesMenu.shaken": "agitou",
    "microbit.isButtonPressed": "botão [BTN] pressionado?",
    "microbit.isTilted": "inclinado para [DIRECTION]?",
    "microbit.pinStateMenu.off": "desligado",
    "microbit.pinStateMenu.on": "ligado",
    "microbit.tiltAngle": "ângulo de inclinação para [DIRECTION]",
    "microbit.tiltDirectionMenu.any": "qualquer",
    "microbit.tiltDirectionMenu.back": "trás",
    "microbit.tiltDirectionMenu.front": "frente",
    "microbit.tiltDirectionMenu.left": "esquerda",
    "microbit.tiltDirectionMenu.right": "direita",
    "microbit.whenButtonPressed": "quando o botão [BTN] estiver pressionado",
    "microbit.whenGesture": "quando [GESTURE]",
    "microbit.whenPinConnected": "quando o pino [PIN] estiver conectado",
    "microbit.whenTilted": "quando inclinado para [DIRECTION]",
    "music.categoryName": "Música",
    "music.changeTempo": "alterar ritmo por [TEMPO]",
    "music.drumBass": "(2) Bumbo",
    "music.drumBongo": "(13) Bongô",
    "music.drumCabasa": "(15) Afoxé",
    "music.drumClaves": "(9) Claves Cubanas",
    "music.drumClosedHiHat": "(6) Prato Chimbau",
    "music.drumConga": "(14) Conga",
    "music.drumCowbell": "(11) Chocalho",
    "music.drumCrashCymbal": "(4) Prato",
    "music.drumCuica": "(18) Cuíca",
    "music.drumGuiro": "(16) Guiro",
    "music.drumHandClap": "(8) Palmas",
    "music.drumOpenHiHat": "(5) Prato Hi-Hat",
    "music.drumSideStick": "(3) Bastão Lateral",
    "music.drumSnare": "(1) Tarol",
    "music.drumTambourine": "(7) Pandeiro",
    "music.drumTriangle": "(12) Triângulo",
    "music.drumVibraslap": "(17) Queixada",
    "music.drumWoodBlock": "(10) Bloco Sonoro",
    "music.getTempo": "ritmo",
    "music.instrumentBass": "(6) Baixo",
    "music.instrumentBassoon": "(14) Fagote",
    "music.instrumentCello": "(8) Violoncelo",
    "music.instrumentChoir": "(15) Coral",
    "music.instrumentClarinet": "(10) Clarinete",
    "music.instrumentElectricGuitar": "(5) Guitarra Elétrica",
    "music.instrumentElectricPiano": "(2) Teclado",
    "music.instrumentFlute": "(12) Flauta",
    "music.instrumentGuitar": "(4) Violão",
    "music.instrumentMarimba": "(19) Marimba",
    "music.instrumentMusicBox": "(17) Caixa de Música",
    "music.instrumentOrgan": "(3) Órgão",
    "music.instrumentPiano": "(1) Piano",
    "music.instrumentPizzicato": "(7) Pizzicato",
    "music.instrumentSaxophone": "(11) Saxofone",
    "music.instrumentSteelDrum": "(18) Tambor de Aço",
    "music.instrumentSynthLead": "(20) Sintetizador principal",
    "music.instrumentSynthPad": "(21) Bloco Sintetizador",
    "music.instrumentTrombone": "(9) Trombone",
    "music.instrumentVibraphone": "(16) Vibrafone",
    "music.instrumentWoodenFlute": "(13) Flauta de madeira",
    "music.midiPlayDrumForBeats": "toque instrumento [DRUM] por [BEATS] batidas",
    "music.midiSetInstrument": "mudar instrumento para [INSTRUMENT]",
    "music.playDrumForBeats": "toque instrumento [DRUM] por [BEATS] batidas",
    "music.playNoteForBeats": "toque a nota [NOTE] por [BEATS] batidas",
    "music.restForBeats": "pausa por [BEATS] batidas",
    "music.setInstrument": "mudar instrumento para [INSTRUMENT]",
    "music.setTempo": "ajuste ritmo para [TEMPO]",
    "pen.categoryName": "Caneta",
    "pen.changeColorParam": "adicione [VALUE]ao parâmetro [COLOR_PARAM] da caneta",
    "pen.changeHue": "adicione [HUE]à cor da caneta ",
    "pen.changeShade": "adicione [SHADE]à tonalidade da caneta ",
    "pen.changeSize": "adicione [SIZE]ao tamanho da caneta",
    "pen.clear": "apague tudo",
    "pen.colorMenu.brightness": "brilho",
    "pen.colorMenu.color": "cor",
    "pen.colorMenu.saturation": "saturação",
    "pen.colorMenu.transparency": "transparência",
    "pen.penDown": "use a caneta",
    "pen.penUp": "levante a caneta",
    "pen.setColor": "mude a cor da caneta para [COLOR]",
    "pen.setColorParam": "Mude o parâmetro [COLOR_PARAM] da caneta para [VALUE]",
    "pen.setHue": "mude a cor da caneta para [HUE]",
    "pen.setShade": "mude a tonalidade da caneta para [SHADE]",
    "pen.setSize": "mude o tamanho da caneta para [SIZE]",
    "pen.stamp": "carimbe",
    "speech.defaultWhenIHearValue": "vamos lá",
    "speech.extensionName": "Transformação de Fala em Texto",
    "speech.listenAndWait": "escute e espere",
    "speech.speechReporter": "fala",
    "speech.whenIHear": "quando eu escutar [PHRASE]",
    "text2speech.alto": "loud",
    "text2speech.categoryName": "Texto para Fala",
    "text2speech.defaultTextToSpeak": "olá",
    "text2speech.giant": "gigante",
    "text2speech.kitten": "gatinho",
    "text2speech.setLanguageBlock": "defina o idioma como [LANGUAGE]",
    "text2speech.setVoiceBlock": "definir voz para [VOICE]",
    "text2speech.speakAndWaitBlock": "falar [WORDS]",
    "text2speech.squeak": "rangido",
    "text2speech.tenor": "tenor",
    "translate.categoryName": "Traduzir",
    "translate.defaultTextToTranslate": "olá",
    "translate.translateBlock": "traduzir [WORDS] para [LANGUAGE]",
    "translate.viewerLanguage": "idioma",
    "videoSensing.categoryName": "Detecção de Vídeo",
    "videoSensing.direction": "direção",
    "videoSensing.motion": "movimento",
    "videoSensing.off": "desligado",
    "videoSensing.on": "ligado",
    "videoSensing.onFlipped": "inverter",
    "videoSensing.setVideoTransparency": "ajuste transparência do vídeo para [TRANSPARENCY]",
    "videoSensing.sprite": "ator",
    "videoSensing.stage": "palco",
    "videoSensing.videoOn": "vídeo [ATTRIBUTE] para [SUBJECT]",
    "videoSensing.videoToggle": "mude vídeo [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "quando detectar sensor de vídeo> [REFERENCE]",
    "wedo2.getDistance": "distância",
    "wedo2.getTiltAngle": "ângulo de inclinação [TILT_DIRECTION]",
    "wedo2.isTilted": "inclinado para [TILT_DIRECTION_ANY]?",
    "wedo2.motorDirection.backward": "por aí",
    "wedo2.motorDirection.forward": "por aqui",
    "wedo2.motorDirection.reverse": "inverter",
    "wedo2.motorId.a": "motor A",
    "wedo2.motorId.all": "todos os motores",
    "wedo2.motorId.b": "motor B",
    "wedo2.motorId.default": "motor",
    "wedo2.motorOff": "desligue o motor [MOTOR_ID]",
    "wedo2.motorOn": "ligue o motor [MOTOR_ID]",
    "wedo2.motorOnFor": "ligue o motor [MOTOR_ID] por [DURATION] segundos",
    "wedo2.playNoteFor": "toque a nota [NOTE] por [DURATION] segundos",
    "wedo2.setLightHue": "defina a cor como [HUE]",
    "wedo2.setMotorDirection": "defina a direção de [MOTOR_ID] como [MOTOR_DIRECTION]",
    "wedo2.startMotorPower": "defina a potência de [MOTOR_ID] como [POWER]",
    "wedo2.tiltDirection.any": "qualquer",
    "wedo2.tiltDirection.down": "baixo",
    "wedo2.tiltDirection.left": "esquerda",
    "wedo2.tiltDirection.right": "direita",
    "wedo2.tiltDirection.up": "para cima",
    "wedo2.whenDistance": "quando distância [OP] [REFERENCE]",
    "wedo2.whenTilted": "quando inclinado para [TILT_DIRECTION_ANY]",
    "cubroiddcmotor.motoroptionmenu.stop": "stop",
    "cubroiddcmotor.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor01.motoroptionmenu.stop": "stop",
    "cubroiddcmotor01.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor01.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor02.motoroptionmenu.stop": "stop",
    "cubroiddcmotor02.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor02.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor.dcMotorControl": "DC Motor [INDEX]",
    "cubroiddcmotor01.extensionName": "DC Motor Block 1",
    "cubroiddcmotor02.extensionName": "DC Motor Block 2",
    "cubroiddcmotor01.dcMotorControl": "turn DC Motor Block 1 [INDEX]",
    "cubroiddcmotor02.dcMotorControl": "turn DC Motor Block 2 [INDEX]",
    "cubroiddcmotor01.dcMotorControl2": "turn DC Motor Block 1 [TIME]for [INDEX] seconds",
    "cubroiddcmotor02.dcMotorControl2": "turn DC Motor Block 2 [TIME]for [INDEX] seconds",
    "cubroiddcmotor01.dcMotorStop": "turn DC Motor Block 1 off",
    "cubroiddcmotor02.dcMotorStop": "turn DC Motor Block 2 off",
    "cubroidled.extensionName": "LED Block",
    "cubroidled.ledMatrixBlock": "display [MATRIX]",
    "cubroidled.ledWordBlock": "display text [MATRIX]",
    "cubroidled.ledNumberBlock": "display number [MATRIX]",
    "cubroidled.ledAllClearBlock": "clear display",
    "cubroidmaster.extensionName": "Master Block",
    "cubroidmaster.colorControl": "turn on the color light [COLOR]",
    "cubroidmaster.colorOff": "light off",
    "cubroidsound.extensionName": "Sound Block",
    "cubroidsound.playSoundBlock": "play note [SOUND]",
    "cubroidsound.playSoundBeatBlock": "play note [SOUND] for [BEATS] beats",
    "cubroidsound.playErrorSoundBlock": "play note [ERROR_SOUND]",
    "cubroidsound.playErrorSoundBeatBlock": "play note [ERROR_SOUND] for [BEATS] beats",
    "cubroidsound.ado": "Do C(48)",
    "cubroidsound.ados": "Do# C#(49)",
    "cubroidsound.are": "Re D(50)",
    "cubroidsound.amib": "Mib Eb(51)",
    "cubroidsound.ami": "Mi E(52)",
    "cubroidsound.afa": "Fa F(53)",
    "cubroidsound.afas": "Fa# F#(54)",
    "cubroidsound.asol": "Sol G(55)",
    "cubroidsound.asols": "Sol# G#(56)",
    "cubroidsound.ala": "La A(57)",
    "cubroidsound.asib": "Sib Bb(58)",
    "cubroidsound.asi": "Si B(59)",
    "cubroidsound.bdo": "Do C(60)",
    "cubroidsound.bdos": "Do# C#(61)",
    "cubroidsound.bre": "Re D(62)",
    "cubroidsound.bmib": "Mib Eb(63)",
    "cubroidsound.bmi": "Mi E(64)",
    "cubroidsound.bfa": "Fa F(65)",
    "cubroidsound.bfas": "Fa# F#(66)",
    "cubroidsound.bsol": "Sol G(67)",
    "cubroidsound.bsols": "Sol# G#(68)",
    "cubroidsound.bla": "Ra A(69)",
    "cubroidsound.bsib": "Sib Bb(70)",
    "cubroidsound.bsi": "Si B(71)",
    "cubroidsound.cdo": "Do C(72)",
    "cubroidsound.cre": "Re D(74)",
    "cubroidsound.cmi": "Mi E(76)",
    "cubroidsound.cfa": "Fa F(77)",
    "cubroidsound.csol": "Sol G(79)",
    "cubroidsound.cla": "Ra A(81)",
    "cubroidsound.csi": "Si B(83)",
    "cubroidsound.ddo": "Do C(84)",
    "cubroidsound.errorSound01": "Error",
    "cubroidsound.errorSound02": "Small effect",
    "cubroidsound.errorSound03": "Warning",
    "cubroidsound.errorSound04": "light",
    "cubroidsound.errorSound05": "basic",
    "cubroidsound.errorSound06": "Great effect",
    "cubroidproximity.extensionName": "Proximity Sensor Block",
    "cubroidproximity.proximityControl": "when obstacle detected",
    "cubroidproximity.isProximityControl": "obstacles detected?",
    "cubroidlighttouch.extensionName": "Light & Touch Sensor Block",
    "cubroidlighttouch.whenButtonPressed": "when button pressed",
    "cubroidlighttouch.isButtonPressed": "button pressed?",
    "cubroidlighttouch.whenBrightnessLessThan01": "when brightness < [DISTANCE]",
    "cubroidlighttouch.whenBrightnessLessThan02": "when brightness > [DISTANCE]",
    "cubroidlighttouch.getBrightness": "brightness"
}