{
    "boost.color.any": "bet kuri spalva",
    "boost.color.black": "juoda",
    "boost.color.blue": "mėlyna",
    "boost.color.green": "žalia",
    "boost.color.red": "raudona",
    "boost.color.white": "balta",
    "boost.color.yellow": "geltona",
    "boost.getMotorPosition": "variklio [MOTOR_REPORTER_ID] pozicija",
    "boost.getTiltAngle": "paversk kryptimi [TILT_DIRECTION]",
    "boost.motorDirection.backward": "šen",
    "boost.motorDirection.forward": "ten",
    "boost.motorDirection.reverse": "atvirkščiai",
    "boost.motorOff": "išjunk variklį [MOTOR_ID] ",
    "boost.motorOn": "įjunk variklį [MOTOR_ID] ",
    "boost.motorOnFor": "suk variklį [MOTOR_ID]  [DURATION] sekundes",
    "boost.motorOnForRotation": "suk variklį [MOTOR_ID]  [ROTATION] apsukas",
    "boost.seeingColor": "matoma [COLOR] blokų?",
    "boost.setLightHue": "keisti šviesos spalvą į [HUE]",
    "boost.setMotorDirection": "nustatyti variklio [MOTOR_ID] kryptį [MOTOR_DIRECTION]",
    "boost.setMotorPower": "nustatyti variklio [MOTOR_ID] greitį į [POWER] %",
    "boost.tiltDirection.any": "bet kur",
    "boost.tiltDirection.down": "žemyn",
    "boost.tiltDirection.left": "kairėn",
    "boost.tiltDirection.right": "dešinėn",
    "boost.tiltDirection.up": "aukštyn",
    "boost.whenColor": "kai [COLOR] bloko matoma ",
    "boost.whenTilted": "kai paversta [TILT_DIRECTION_ANY]",
    "ev3.beepNote": "groti natą [NOTE]tiek sekundžių: [TIME]",
    "ev3.buttonPressed": "ar mygtukas [PORT] nuspaustas?",
    "ev3.getBrightness": "šviesumas",
    "ev3.getDistance": "atstumas",
    "ev3.getMotorPosition": "[PORT] variklio pozicija",
    "ev3.motorSetPower": "[PORT] varikliui nustatyti jėgą [POWER] %",
    "ev3.motorTurnClockwise": "[PORT] variklį sukti šia kryptimi tiek sekundžių: [TIME]",
    "ev3.motorTurnCounterClockwise": "[PORT] variklį sukti šia kryptimi tiek sekundžių: [TIME]",
    "ev3.whenBrightnessLessThan": "kai šviesumas < [DISTANCE]",
    "ev3.whenButtonPressed": "kai nuspaudžiamas mygtukas [PORT]",
    "ev3.whenDistanceLessThan": "kai atstumas < [DISTANCE]",
    "gdxfor.getAcceleration": "pagreitis [DIRECTION]",
    "gdxfor.getForce": "jėga",
    "gdxfor.getSpin": "sukimosi greitis [DIRECTION]]",
    "gdxfor.getTilt": "pasvirk kampu [TILT]",
    "gdxfor.isFreeFalling": "krenta?",
    "gdxfor.isTilted": "Pasukta [TILT]?",
    "gdxfor.pulled": "traukiama",
    "gdxfor.pushed": "stumiama",
    "gdxfor.shaken": "papurtyta",
    "gdxfor.startedFalling": "pradėjo kristi",
    "gdxfor.tiltDirectionMenu.any": "bet kur",
    "gdxfor.tiltDirectionMenu.back": "atgal",
    "gdxfor.tiltDirectionMenu.front": "priekin",
    "gdxfor.tiltDirectionMenu.left": "kairėn",
    "gdxfor.tiltDirectionMenu.right": "dešinėn",
    "gdxfor.turnedFaceDown": "pasukti veidu žemyn",
    "gdxfor.turnedFaceUp": "pasukti veidu aukštyn",
    "gdxfor.whenForcePushedOrPulled": "kai jėgos jutiklis [PUSH_PULL]",
    "gdxfor.whenGesture": "kai [GESTURE]",
    "gdxfor.whenTilted": "pakreipus [TILT]",
    "makeymakey.downArrow": "rodyklė žemyn",
    "makeymakey.downArrowShort": "žemyn",
    "makeymakey.leftArrow": "rodyklė kairėn",
    "makeymakey.leftArrowShort": "kairėn",
    "makeymakey.rightArrow": "rodyklė dešinėn",
    "makeymakey.rightArrowShort": "dešinėn",
    "makeymakey.spaceKey": "tarpas",
    "makeymakey.upArrow": "rodyklė aukštyn",
    "makeymakey.upArrowShort": "aukštyn",
    "makeymakey.whenKeyPressed": "Kai [KEY] paspaustas",
    "makeymakey.whenKeysPressedInOrder": "Kai seka [SEQUENCE] suvesta",
    "microbit.buttonsMenu.any": "bet kuris",
    "microbit.clearDisplay": "išvalyti ekraną",
    "microbit.defaultTextToDisplay": "Sveiki!",
    "microbit.displaySymbol": "rodyti [MATRIX]",
    "microbit.displayText": "rodyti tekstą [TEXT]",
    "microbit.gesturesMenu.jumped": "šuolis",
    "microbit.gesturesMenu.moved": "pajudinta",
    "microbit.gesturesMenu.shaken": "papurtyta",
    "microbit.isButtonPressed": "ar nuspaustas mygtukas [BTN]?",
    "microbit.isTilted": "ar paversta [DIRECTION]?",
    "microbit.pinStateMenu.off": "išjungti",
    "microbit.pinStateMenu.on": "įjungti",
    "microbit.tiltAngle": "paversta kampu [DIRECTION]",
    "microbit.tiltDirectionMenu.any": "bet kuris",
    "microbit.tiltDirectionMenu.back": "atgal",
    "microbit.tiltDirectionMenu.front": "pirmyn",
    "microbit.tiltDirectionMenu.left": "kairėn",
    "microbit.tiltDirectionMenu.right": "dešinėn",
    "microbit.whenButtonPressed": "kai paspaudi mygtuką [BTN]",
    "microbit.whenGesture": "kai [GESTURE]",
    "microbit.whenPinConnected": "kai prijungtas kištukas [PIN]",
    "microbit.whenTilted": "kai paversta [DIRECTION]",
    "music.categoryName": "Muzika",
    "music.changeTempo": "tempą padidink [TEMPO]",
    "music.drumBass": "(2) Bosinis būgnas",
    "music.drumBongo": "(13) Bongo būgnas",
    "music.drumCabasa": "(15) Kabasa",
    "music.drumClaves": "(9)  Strypeliai",
    "music.drumClosedHiHat": "(6) Uždaras haihetas",
    "music.drumConga": "(14) Konga",
    "music.drumCowbell": "(11) Skrabalas",
    "music.drumCrashCymbal": "(4) „Crash“ lėkštės",
    "music.drumCuica": "(18) Kuika",
    "music.drumGuiro": "(16) Giras",
    "music.drumHandClap": "(8) Pliaukštelėjimas delnais",
    "music.drumOpenHiHat": "(5) Atviras haihetas",
    "music.drumSideStick": "(3) Side Stick",
    "music.drumSnare": "(1) Mažasis būgnas",
    "music.drumTambourine": "(7) Tambūrinas",
    "music.drumTriangle": "(12) Trikampis",
    "music.drumVibraslap": "(17) Vibraslapis",
    "music.drumWoodBlock": "(10) Trinkelė",
    "music.getTempo": "tempas",
    "music.instrumentBass": "(6) Bosas",
    "music.instrumentBassoon": "(14) Fagotas",
    "music.instrumentCello": "(8) Violončelė",
    "music.instrumentChoir": "(15) Choras",
    "music.instrumentClarinet": "(10) Klarnetas",
    "music.instrumentElectricGuitar": "(5) Elektrinė gitara",
    "music.instrumentElectricPiano": "(2) Sintezatorius",
    "music.instrumentFlute": "(12) Fleita",
    "music.instrumentGuitar": "(4) Gitara",
    "music.instrumentMarimba": "(19) Marimba",
    "music.instrumentMusicBox": "(17) Muzikinė dėžutė",
    "music.instrumentOrgan": "(3) Vargonai",
    "music.instrumentPiano": "(1) Pianinas",
    "music.instrumentPizzicato": "(7) Pizzicato",
    "music.instrumentSaxophone": "(11) Saksofonas",
    "music.instrumentSteelDrum": "(18) Plieno būgnas",
    "music.instrumentSynthLead": "(20) Solinis sintezatorius",
    "music.instrumentSynthPad": "(21) Sintezatorius",
    "music.instrumentTrombone": "(9) Trombonas",
    "music.instrumentVibraphone": "(16) Vibrafonas",
    "music.instrumentWoodenFlute": "(13) Medinė fleita",
    "music.midiPlayDrumForBeats": "groti būgnu [DRUM] tiek taktų: [BEATS]",
    "music.midiSetInstrument": "nustatyti instrumentą į [INSTRUMENT]",
    "music.playDrumForBeats": "groti būgnu [DRUM] tiek taktų: [BEATS]",
    "music.playNoteForBeats": "groti natą [NOTE] tiek taktų: [BEATS]",
    "music.restForBeats": "pauzė tiek taktų: [BEATS]",
    "music.setInstrument": "instrumentą nustatyti į [INSTRUMENT]",
    "music.setTempo": "keisti tempą į [TEMPO] ",
    "pen.categoryName": "Pieštukas",
    "pen.changeColorParam": "keisk pieštuko [COLOR_PARAM]per[VALUE]",
    "pen.changeHue": "keisk pieštuko spalvą per [HUE]",
    "pen.changeShade": "keisk pieštuko atspalvį per [SHADE]",
    "pen.changeSize": "keisk pieštuko dydį per [SIZE]",
    "pen.clear": "ištrinti viską",
    "pen.colorMenu.brightness": "šviesumas",
    "pen.colorMenu.color": "spalva",
    "pen.colorMenu.saturation": "sodrumas",
    "pen.colorMenu.transparency": "permatomumas",
    "pen.penDown": "pieštukas pieš",
    "pen.penUp": "pieštukas nebepieš",
    "pen.setColor": "keisti pieštuko spalvą į [COLOR]",
    "pen.setColorParam": "piešimo [COLOR_PARAM] = [VALUE]",
    "pen.setHue": "piešimo atspalvis = [HUE]",
    "pen.setShade": "keisti pieštuko atspalvį į [SHADE]",
    "pen.setSize": "keisti pieštuko dydį į [SIZE]",
    "pen.stamp": "antspaudas",
    "speech.defaultWhenIHearValue": "pirmyn",
    "speech.extensionName": "Skaityti tekstą",
    "speech.listenAndWait": "paklausyti ir laukti",
    "speech.speechReporter": "kalba",
    "speech.whenIHear": "kai išgirstu [PHRASE]",
    "text2speech.alto": "alto balsas",
    "text2speech.categoryName": "Skaityti tekstą",
    "text2speech.defaultTextToSpeak": "sveiki",
    "text2speech.giant": "milžino balsas",
    "text2speech.kitten": "kačiukas",
    "text2speech.setLanguageBlock": "keisti kalbą į [LANGUAGE]",
    "text2speech.setVoiceBlock": "keisti balsą į [VOICE]",
    "text2speech.speakAndWaitBlock": "sakyti [WORDS]",
    "text2speech.squeak": "cyptelėjimas",
    "text2speech.tenor": "tenoro balsas",
    "translate.categoryName": "Išversti",
    "translate.defaultTextToTranslate": "sveiki",
    "translate.translateBlock": "išversti [WORDS] į [LANGUAGE]",
    "translate.viewerLanguage": "kalba",
    "videoSensing.categoryName": "Vaizdo jutikliai",
    "videoSensing.direction": "kryptis",
    "videoSensing.motion": "judesys",
    "videoSensing.off": "Išjungti",
    "videoSensing.on": "Įjungti",
    "videoSensing.onFlipped": "kai apverčiama",
    "videoSensing.setVideoTransparency": "nustatyk video permatomumą į[TRANSPARENCY]",
    "videoSensing.sprite": "veikėjas",
    "videoSensing.stage": "scena",
    "videoSensing.videoOn": "video [ATTRIBUTE]iš[SUBJECT]",
    "videoSensing.videoToggle": "perjungti video į [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "kai judesio vaizde > [REFERENCE]",
    "wedo2.getDistance": "atstumas",
    "wedo2.getTiltAngle": "paversta kryptimi [TILT_DIRECTION]",
    "wedo2.isTilted": "ar paversta [TILT_DIRECTION_ANY]?",
    "wedo2.motorDirection.backward": "šen",
    "wedo2.motorDirection.forward": "ten",
    "wedo2.motorDirection.reverse": "atbulai",
    "wedo2.motorId.a": "variklis A",
    "wedo2.motorId.all": "visi varikliai",
    "wedo2.motorId.b": "variklis B",
    "wedo2.motorId.default": "variklis",
    "wedo2.motorOff": "išjungti [MOTOR_ID]",
    "wedo2.motorOn": "įjungti [MOTOR_ID]",
    "wedo2.motorOnFor": "įjungti [MOTOR_ID]  [DURATION] sekundžių",
    "wedo2.playNoteFor": "groti natą [NOTE]  [DURATION] s.",
    "wedo2.setLightHue": "spalvos tonas = [HUE]",
    "wedo2.setMotorDirection": "[MOTOR_ID] kryptis = [MOTOR_DIRECTION]",
    "wedo2.startMotorPower": "[MOTOR_ID] galia = [POWER]",
    "wedo2.tiltDirection.any": "bet kuris",
    "wedo2.tiltDirection.down": "žemyn",
    "wedo2.tiltDirection.left": "kairėn",
    "wedo2.tiltDirection.right": "dešinėn",
    "wedo2.tiltDirection.up": "aukštyn",
    "wedo2.whenDistance": "kai atstumas [OP] [REFERENCE]",
    "wedo2.whenTilted": "kai paversta [TILT_DIRECTION_ANY]",
    "cubroiddcmotor.motoroptionmenu.stop": "stop",
    "cubroiddcmotor.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor01.motoroptionmenu.stop": "stop",
    "cubroiddcmotor01.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor01.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor02.motoroptionmenu.stop": "stop",
    "cubroiddcmotor02.motoroptionmenu.left": "rotate left",
    "cubroiddcmotor02.motoroptionmenu.right": "rotate right",
    "cubroiddcmotor.dcMotorControl": "DC Motor [INDEX]",
    "cubroiddcmotor01.extensionName": "DC Motor Block 1",
    "cubroiddcmotor02.extensionName": "DC Motor Block 2",
    "cubroiddcmotor01.dcMotorControl": "turn DC Motor Block 1 [INDEX]",
    "cubroiddcmotor02.dcMotorControl": "turn DC Motor Block 2 [INDEX]",
    "cubroiddcmotor01.dcMotorControl2": "turn DC Motor Block 1 [TIME]for [INDEX] seconds",
    "cubroiddcmotor02.dcMotorControl2": "turn DC Motor Block 2 [TIME]for [INDEX] seconds",
    "cubroiddcmotor01.dcMotorStop": "turn DC Motor Block 1 off",
    "cubroiddcmotor02.dcMotorStop": "turn DC Motor Block 2 off",
    "cubroidled.extensionName": "LED Block",
    "cubroidled.ledMatrixBlock": "display [MATRIX]",
    "cubroidled.ledWordBlock": "display text [MATRIX]",
    "cubroidled.ledNumberBlock": "display number [MATRIX]",
    "cubroidmaster.extensionName": "Master Block",
    "cubroidmaster.colorControl": "turn on the color light [COLOR]",
    "cubroidmaster.colorOff": "light off",
    "cubroidsound.extensionName": "Sound Block",
    "cubroidsound.playSoundBlock": "play note [SOUND]",
    "cubroidsound.playSoundBeatBlock": "play note [SOUND] for [BEATS] beats",
    "cubroidsound.playErrorSoundBlock": "play note [ERROR_SOUND]",
    "cubroidsound.playErrorSoundBeatBlock": "play note [ERROR_SOUND] for [BEATS] beats",
    "cubroidsound.ado": "Do C(48)",
    "cubroidsound.ados": "Do# C#(49)",
    "cubroidsound.are": "Re D(50)",
    "cubroidsound.amib": "Mib Eb(51)",
    "cubroidsound.ami": "Mi E(52)",
    "cubroidsound.afa": "Fa F(53)",
    "cubroidsound.afas": "Fa# F#(54)",
    "cubroidsound.asol": "Sol G(55)",
    "cubroidsound.asols": "Sol# G#(56)",
    "cubroidsound.ala": "La A(57)",
    "cubroidsound.asib": "Sib Bb(58)",
    "cubroidsound.asi": "Si B(59)",
    "cubroidsound.bdo": "Do C(60)",
    "cubroidsound.bdos": "Do# C#(61)",
    "cubroidsound.bre": "Re D(62)",
    "cubroidsound.bmib": "Mib Eb(63)",
    "cubroidsound.bmi": "Mi E(64)",
    "cubroidsound.bfa": "Fa F(65)",
    "cubroidsound.bfas": "Fa# F#(66)",
    "cubroidsound.bsol": "Sol G(67)",
    "cubroidsound.bsols": "Sol# G#(68)",
    "cubroidsound.bla": "Ra A(69)",
    "cubroidsound.bsib": "Sib Bb(70)",
    "cubroidsound.bsi": "Si B(71)",
    "cubroidsound.cdo": "Do C(72)",
    "cubroidsound.cre": "Re D(74)",
    "cubroidsound.cmi": "Mi E(76)",
    "cubroidsound.cfa": "Fa F(77)",
    "cubroidsound.csol": "Sol G(79)",
    "cubroidsound.cla": "Ra A(81)",
    "cubroidsound.csi": "Si B(83)",
    "cubroidsound.ddo": "Do C(84)",
    "cubroidsound.errorSound01": "Error",
    "cubroidsound.errorSound02": "Small effect",
    "cubroidsound.errorSound03": "Warning",
    "cubroidsound.errorSound04": "light",
    "cubroidsound.errorSound05": "basic",
    "cubroidsound.errorSound06": "Great effect",
    "cubroidproximity.extensionName": "Proximity Sensor Block",
    "cubroidproximity.proximityControl": "when obstacle detected",
    "cubroidproximity.isProximityControl": "obstacles detected?",
    "cubroidlighttouch.extensionName": "Light & Touch Sensor Block",
    "cubroidlighttouch.whenButtonPressed": "when button pressed",
    "cubroidlighttouch.isButtonPressed": "button pressed?",
    "cubroidlighttouch.whenBrightnessLessThan01": "when brightness < [DISTANCE]",
    "cubroidlighttouch.whenBrightnessLessThan02": "when brightness > [DISTANCE]",
    "cubroidlighttouch.getBrightness": "brightness"
}